-- https://marketplace.visualstudio.com/items?itemName=JohnnyMorganz.luau-lsp
type HttpRequestOptions = {
	Url: string,
	Method: "GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "PATCH" | nil,
	Headers: { string }?,
	Body: string?,
}
type HttpResponseData = {
	StatusCode: number,
	StatusMessage: string,
	Headers: { string },
	Body: string?,
}
type CipherMode = "CBC" | "ECB" | "CTR" | "CFB" | "OFB" | "GCM"
type DecompileOptions = {
	VerboseFunctions: boolean?,
	FunctionLine: boolean?,
	FunctionUpvalues: boolean?,
	FunctionConstants: boolean?,
	RenameLoopVariables: boolean?,
	VariableRenaming: boolean?,
	ExtraRenaming: boolean?,
	NullableNaming: boolean?,
	PrimitiveRenaming: boolean?,
	Semicolons: boolean?,
	TableNewlines: boolean?,
	UseIfElseExpression: boolean?,
	CallLineInfo: boolean?,
	LazyFlattening: boolean?,
	FormatNamecallChains: boolean?,
	FlattenGuardStatements: boolean?,
	MaxCustomNameLength: number?,
	MaxTabs: number?,
	MaxRationalDenominator: number?,
	DeduplicationThreshold: number?,
}
type SaveOptions = {
	FileName: string?,
	IgnoreArchivable: boolean?,
	SavePlayerCharacters: boolean?,
	SavePlayers: boolean?,
	DisableCompression: boolean?,
	Decompile: boolean?,
	DecompileJobless: boolean?,
	SaveNonCreatable: boolean?,
	NilInstances: boolean?,
	CopyToClipboard: boolean?,
	IgnoreList: boolean?,
	DecompileOptions: DecompileOptions?,
}

declare game: typeof(game) & {
    HttpGet: (self: DataModel, url: string, nocache: boolean?) -> string,
}
declare debug: typeof(debug) & {
	dumpheap: (...any) -> ...any, -- no documentation
	dumprefs: (...any) -> ...any, -- no documentation
	getcallstack: (t: thread?) -> { any },
	getconstant: (func: (...any) -> ...any | number, index: number) -> any,
	getconstants: (func: (...any) -> ...any | number) -> { any },
	getinfo: (func: (...any) -> ...any | number) -> { source: string, short_src: string, func: (...any) -> ...any, what: string, currentline: number, name: string, nups: number, numparams: number, is_vararg: number },
	getmetatable: (t: { [any]: any }) -> { [any]: any },
	getproto: (func: (...any) -> ...any | number, index: number, active: boolean?) -> (...any) -> ...any | { (...any) -> ...any },
	getprotos: (func: (...any) -> ...any | number) -> { (...any) -> ...any },
	getstack: (level: number, index: number?) -> any | { any },
	getupvalue: (func: (...any) -> ...any | number, index: number) -> any,
	getupvalues: (func: (...any) -> ...any | number) -> { any },
	isvalidlevel: (level: number, t: thread?) -> boolean,
	loadmodule: (module: ModuleScript) -> ...any,
	setconstant: (func: (...any) -> ...any | number, index: number, value: any) -> (),
	setmetatable: (t: { [any]: any }, mt: { [any]: any }) -> (),
	setstack: (level: number, index: number, value: any) -> (),
	setupvalue: (func: (...any) -> ...any | number, index: number, value: any) -> (),
}
declare base64: {
	encode: (data: string) -> string,
	decode: (data: string) -> string,
}
declare http: {
	request: (table: HttpRequestOptions) -> HttpResponseData,
}
declare crypt: {
	base64_decode: (data: string) -> string,
	base64_encode: (data: string) -> string,
	base64decode: (data: string) -> string,
	base64encode: (data: string) -> string,
	decrypt: (data: string, key: string, iv: string, mode: CipherMode) -> string,
	encrypt: (data: string, key: string, iv: string?, mode: CipherMode?) -> (string, string),
	generatebytes: (size: number) -> string,
	generatekey: () -> string,
	hash: (data: string, algorithm: string) -> string,
	lz4compress: (data: string) -> string,
	lz4decompress: (data: string, size: number) -> string,
	random: (len: number) -> string,
	base64: {
		encode: (data: string) -> string,
		decode: (data: string) -> string,
	},
}
declare cache: {
	replace: (object: Instance, newObject: Instance) -> (),
	iscached: (object: Instance) -> boolean,
	invalidate: (object: Instance) -> (),
}
declare Drawing: {
	Fonts: {
		UI: number,
		Monospace: number,
		Plex: number,
		System: number,
	},
	new: ((type: "Line") -> DrawingLine) & ((type: "Text") -> DrawingText) & ((type: "Image") -> DrawingImage) & ((type: "Circle") -> DrawingCircle) & ((type: "Square") -> DrawingSquare) & ((type: "Quad") -> DrawingQuad) & ((type: "Triangle") -> DrawingTriangle),
}
declare class BaseDrawing
	Visible: boolean
	ZIndex: number
	Transparency: number
	Color: Color3
	function Destroy(self): ()
	function Remove(self): ()
end
declare class DrawingLine extends BaseDrawing
	From: Vector2
	To: Vector2
	Thickness: number
end
declare class DrawingText extends BaseDrawing
	Text: string
	TextBounds: Vector2
	Font: typeof(Drawing.Fonts)
	Size: number
	Position: Vector2
	Center: boolean
	Outline: boolean
	OutlineColor: Color3
end
declare class DrawingImage extends BaseDrawing
	Data: string
	Size: Vector2
	Position: Vector2
	Rounding: number
end
declare class DrawingCircle extends BaseDrawing
	NumSides: number
	Radius: number
	Position: Vector2
	Thickness: number
	Filled: boolean
end
declare class DrawingSquare extends BaseDrawing
	Size: Vector2
	Position: Vector2
	Thickness: number
	Filled: boolean
end
declare class DrawingQuad extends BaseDrawing
	PointA: Vector2
	PointB: Vector2
	PointC: Vector2
	PointD: Vector2
	Thickness: number
	Filled: boolean
end
declare class DrawingTriangle extends BaseDrawing
	PointA: Vector2
	PointB: Vector2
	PointC: Vector2
	Thickness: number
	Filled: boolean
end

declare function appendfile(path: string, data: string): ()
declare function checkcaller(): boolean
declare function checkclosure(func: (...any) -> ...any): boolean
declare function clear_teleport_queue(): ()
declare function cleardrawcache(): ()
declare function clearteleportqueue(): ()
declare function clonefunction<T>(func: T): T
declare function cloneref<T>(object:T): T
declare function compareinstances(a: Instance, b: Instance): boolean
declare function consoleclear(): ()
declare function consolecreate(): ()
declare function consoledestroy(): ()
declare function consoleinput(): string
declare function consoleprint(text: string): ()
declare function consolesettitle(title: string): ()
declare function decompile(target: ((...any) -> ...any) | BaseScript, options: DecompileOptions?): string
declare function delfile(path: string): ()
declare function delfolder(path: string): ()
declare function dofile(path: string): ()
declare function dumpstring(script: BaseScript): string
declare function fireclickdetector(object: ClickDetector, distance: number?, event: string?): ()
declare function fireproximityprompt(object: ProximityPrompt): ()
declare function firesignal(signal: RBXScriptSignal, ...:any): ()
declare function firetouchinterest(part: Instance, to_touch: Instance, toggle: boolean)
declare function get_hidden_gui(): Folder
declare function get_thread_identity(): number
declare function getactors(): { Actor }
declare function getcallbackmember(instance: Instance, property: string, return_raw: boolean?): any
declare function getcallbackvalue(object: Instance, property: string): ((...any) -> ...any)?
declare function getcallingscript(): BaseScript | nil
declare function getclipboard(): string
declare function getconnections(signal: RBXScriptSignal, context: number?)
declare function getcustomasset(path: string, noCache: boolean): string
declare function getexecutorname(): string
declare function getfflag(fflag: string): string
declare function getfpscap(cap: number): ()
declare function getgc(includeTables: boolean?): { (...any) -> ...any | Instance | { [any]: any } }
declare function getgenv(): { [string]: any }
declare function gethiddenproperties(instance: Instance): { [string]: any }
declare function gethiddenproperty(instance: Instance, property_name: string): any
declare function gethookcache(): { [any]: any }
declare function gethui(): Folder
declare function gethwid(): string
declare function getidentity(): number
declare function getinstancecache(): { [any]: Instance }
declare function getinstances(): { [number]: Instance }
declare function getloadedmodules(excludeCore: boolean?): { ModuleScript }
declare function getnamecallmethod(): string
declare function getnilinstances(): { Instance }
declare function getproperties(instance: Instance): { [string]: any }
declare function getrawmetatable(object: { [any]: any }): { [any]: any } | nil
declare function getreg(): { [any]: any }
declare function getrenderproperty(drawing: BaseDrawing, property: string): any
declare function getrenv(): { [any]: any }
declare function getrunningscripts(): { BaseScript }
declare function getscriptbytecode(script: BaseScript): string
declare function getscriptclosure(script: BaseScript): (...any) -> ...any
declare function getscriptfunction(script: BaseScript): (...any) -> ...any
declare function getscripthash(script: BaseScript): string
declare function getscripts(): { BaseScript }
declare function getsenv(script: BaseScript): { [string]: any }
declare function gettenv(t: thread?): { [any]: any }
declare function getthreadcontext(): number
declare function getthreadidentity(): number
declare function hookfunction<T>(func: T, hook: (...any) -> ...any): T
declare function hookmetamethod(object: { [any]: any }, method: string, hook: (...any) -> ...any): (...any) -> ...any
declare function http_request(table: HttpRequestOptions): HttpResponseData
declare function identifyexecutor(): (string, string)
declare function iscclosure(func: (...any) -> ...any): boolean
declare function isexecutorclosure(func: (...any) -> ...any): boolean
declare function isfile(path: string): boolean
declare function isfolder(path: string): boolean
declare function isfunctionhooked(func: (...any) -> ...any): boolean
declare function isgameactive(): boolean
declare function islclosure(func: (...any) -> ...any): boolean
declare function isourclosure(func: (...any) -> ...any): boolean
declare function isrbxactive(): boolean
declare function isreadonly(object: { [any]: any }): boolean
declare function isrenderobj(object: any): boolean
declare function isscriptable(instance: Instance, property_name: string): boolean
declare function iswindowactive(): boolean
declare function iswritable(table: { [any] : any }): boolean
declare function iswriteble(table: { [any] : any }): boolean -- blame awp for this incorrect spelling
declare function keyclick(key: Enum.KeyCode): ()
declare function keypress(key: Enum.KeyCode | number): ()
declare function keyrelease(key: Enum.KeyCode | number): ()
declare function listfiles(path: string): { string }
declare function loadfile(path: string, chunkname: string?): (((...any) -> ...any)?, string?)
declare function loadstring(source: string, chunkname: string?): (((...any) -> ...any)?, string?)
declare function makefolder(path: string): ()
declare function makereadonly(table: { [any]: any }): ()
declare function makewritable(table: { [any]: any }): ()
declare function messagebox(text: string, caption: string?, flags: number?): number
declare function mouse1click(): ()
declare function mouse1press(): ()
declare function mouse1release(): ()
declare function mouse2click(): ()
declare function mouse2press(): ()
declare function mouse2release(): ()
declare function mousemoveabs(x: number, y: number): ()
declare function mousemoverel(x: number, y: number): ()
declare function mousescroll(pixels: number): ()
declare function newcclosure<T>(func: T): T
declare function queue_on_teleport(code: string): ()
declare function queueonteleport(code: string): ()
declare function queueteleport(code: string): ()
declare function rconsoleclear(): ()
declare function rconsolecreate(): ()
declare function rconsoledestroy(): ()
declare function rconsoleerr(data: string, async: boolean?): ()
declare function rconsolehidden(): boolean
declare function rconsolehide(): ()
declare function rconsoleinfo(data: string, async: boolean?): ()
declare function rconsoleinput(): string
declare function rconsolename(title: string): ()
declare function rconsoleprint(data: string, async: boolean?, escape: boolean?): ()
declare function rconsolesettitle(title: string): ()
declare function rconsoleshow(): ()
declare function rconsoletoggle(): ()
declare function rconsoletop(should_be_top: boolean): ()
declare function rconsolewarn(data: string, async: boolean?): ()
declare function readfile(path: string): string
declare function replaceclosure<T>(func: T, hook: (...any) -> ...any): T
declare function request(table: HttpRequestOptions): HttpResponseData
declare function restorefunction(to_restore: (...any) -> ...any): ()
declare function run_on_actor(actor: Actor, source: string, ...: any): boolean
declare function saveinstance(instance: Instance | { Instance }, options: SaveOptions?): boolean
declare function saveplace(options: SaveOptions?): boolean
declare function set_thread_identity(identity: number): ()
declare function setclipboard(data: string | number | Instance | { [any]: any }): boolean
declare function setfflag(fflag: string, value: string): boolean
declare function setfpscap(fps: number): ()
declare function sethiddenproperty(object: Instance, property: string, value: any): boolean
declare function setidentity(identity: number): ()
declare function setnamecallmethod(method: string): ()
declare function setrawmetatable(object: { [any]: any }, metatable: { [any]: any }): { [any]: any } | nil
declare function setreadonly(object: { [any]: any }, readonly: boolean): ()
declare function setrenderproperty(drawing: { [any]: any }, property: string, value: any): ()
declare function setscriptable(instance: Instance, property_name: string, scriptable: boolean): boolean
declare function setsimulationradius(radius: number): ()
declare function setthreadcontext(identity: number): ()
declare function setthreadidentity(identity: number): ()
declare function toclipboard(string: string): ()
declare function writefile(path: string, data: string): ()